import unittest
from flamechess.jiuqi import Game


class MyTestCase(unittest.TestCase):
    def setUp(self) -> None:
        self.game = Game()
        self.s1 = [[1, 1, 0, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, -1],
                   [1, 1, 0, 0, -1, 1, 1, 0, 0, -1, -1, 1, -1, -1],
                   [1, 0, 0, -1, 0, -1, 1, 1, -1, -1, -1, -1, 0, 1],
                   [1, -1, 1, 0, 0, 1, 1, 0, -1, 0, -1, 1, 0, -1],
                   [1, 1, 0, 1, -1, 0, -1, -1, 0, -1, -1, -1, 0, 0],
                   [1, 1, 0, 1, 1, 1, -1, 0, 0, -1, 0, 0, -1, 0],
                   [1, 0, 0, 0, -1, 0, -1, 1, 1, -1, 0, -1, -1, -1],
                   [-1, 0, 1, 0, 0, 1, 0, 0, 1, -1, 0, 1, 0, 0],
                   [1, 1, 0, 1, 1, 1, -1, 0, 1, 0, 0, -1, -1, -1],
                   [1, 1, 0, 1, 0, 1, -1, 0, 1, 0, 0, 0, 0, -1],
                   [0, 0, -1, 0, 0, -1, -1, 0, 0, -1, -1, 1, 0, -1],
                   [-1, 0, -1, 0, -1, 0, -1, 1, 0, 1, -1, 0, -1, 0],
                   [-1, -1, 1, 0, -1, 0, 1, 1, -1, 0, 1, 1, -1, -1],
                   [-1, 1, -1, -1, 0, 0, 1, 0, -1, 0, -1, 0, 1, 0]]
        self.s2 = [[-1, 0, 1, -1, -1, -1, 1, 0, 1, -1, 0, -1, -1, 0], [-1, -1, -1, 1, 0, -1, -1, -1, 1, 1, 1, 1, 0, 1],
                   [1, -1, -1, 1, 0, 1, -1, -1, -1, 1, 1, -1, 1, 0], [-1, -1, 0, 1, -1, 1, 0, 0, 0, 0, -1, 0, 1, -1],
                   [0, -1, 1, 1, 0, -1, 0, -1, 0, 1, -1, -1, -1, 1], [-1, 0, -1, 0, 0, -1, 1, 1, 1, 0, 0, 0, -1, 1],
                   [-1, 0, 1, 0, 0, 1, 1, 0, -1, -1, 1, 1, 1, 0], [-1, 1, 0, -1, -1, -1, 1, -1, -1, 0, 1, 0, -1, -1],
                   [-1, 0, 0, 0, 1, -1, 0, -1, -1, -1, 0, 0, 0, 1], [-1, 1, 1, 1, -1, 1, -1, -1, 0, 1, 0, 1, -1, 1],
                   [1, -1, 1, 1, -1, 1, 0, 1, -1, 0, 0, 0, 1, 0], [1, 1, -1, -1, -1, -1, 0, -1, 0, 1, 0, -1, -1, 0],
                   [0, -1, 1, 0, -1, -1, 0, 1, 1, -1, 0, 1, 1, 0], [1, 0, -1, 0, -1, 1, 1, -1, 0, -1, 1, -1, -1, 0]]
        self.s3 = [[0, 0, 0, 0, 0, 1, -1, 1, -1, 0, 0, 0, 0, 0], [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

    def test_available_actions(self):
        args = [[self.s1, -1, "layout"], [self.s2, 1, "play"], [self.s3, -1, "play"]]
        answers = [[], [], []]
        for arg, answer in zip(args, answers):
            self.assertEqual(self.game.available_actions(*arg), answer)

    def test_next_state(self):
        args = [[self.s1, 1, "play"], [self.s2, -1, "layout"], [self.s3, 1, "play"]]
        answers = [[], [], []]
        for arg, answer in zip(args, answers):
            self.assertEqual(self.game.next_state(*arg), answer)

    def test_end_game(self):
        even = [[0 for x in range(14)] for i in range(14)]
        even[2][3], even[3][5] = 1
        even[9][8] = -1
        win = [[0 for x in range(14)] for i in range(14)]
        win[3][3] = 1
        args = [[self.s1, 1, "play"], [even, -1, "play"], [self.s3, -1, "play"], [win, -1, "play"]]
        answers = [0, 0.5, 0, -1]
        for arg, answer in zip(args, answers):
            self.assertEqual(self.game.next_state(*arg), answer)


if __name__ == '__main__':
    unittest.main()
